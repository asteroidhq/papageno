#! /usr/bin/perl

# usage: update-peers [-f] [file]
# Defaults to use $PWD/bgp-peers.csv

use strict;
use File::Copy;
use LWP::Simple;                # From CPAN
use JSON qw( decode_json );     # From CPAN

my $basedir=".";
my $input="$ENV{PWD}/bgp-peers.csv";
my $force=0;
my $verbose=0;
my $quiet=0;
my %asn_counter;
my $ix_id;
my $ix_desc;

foreach my $val (@ARGV) {
	if ($val eq "-f" )	{ $force=1; next }
	elsif($val eq "-v")	{ $verbose+=1; next }
	elsif($val eq "-q")	{ $quiet=1; next }
	else			{ $input=$val; }
}

sub cli_out {
	if ($quiet==1) { return;}
	my ($str,$relevance) = @_;
	if ($relevance == "") { $relevance=0};
	if ($relevance <= $verbose) { print $str }
}

sub readfile {
        return `cat $_[0]`;
}

sub output_peer {
	my ($out, $asn, $template, $desc, $ip, $filter, $prefixlimit, $localpref, $password, $passive ) = @_;
	if ($filter eq "NONE") { $filter = ""; }
	my $version;
	if ($ip =~ /:/) { $version = "6" } else {$version= "4" } 
	my $id = substr($template,0,1).$version."_".$asn.sprintf("_%02d",$asn_counter{$asn});
	my $asset = $filter;
	$filter =~ tr/-/_/;
	print $out "protocol bgp $id from $template {\n".
		   "    description \"$desc\";\n".
		   "    neighbor $ip as $asn;\n".
		   "    #FILTERSET;$asn;$asset;$template;$id\n".
		   #		   "    import filter asn_".$asn."_$version;\n"; 
		   "    import filter filter_$id;\n"; 
	if ($password ne "")    { print $out "    password \"$password\";\n"; }
	if ($prefixlimit ne "") { print $out "    import limit $prefixlimit action block;\n"; }
	if ($localpref ne "") 	{ print $out "    preference $localpref;\n"; }
	if ($passive !~ /\s*/) 	{ print $out "    passive on;\n"; }
	print $out "}\n\n";
}

my %updated_net;
my $updated_net;

open (my $fh, "<:encoding(UTF-8)", $input) or die "$!\n";
open (my $out4, ">", "$basedir/includes/peers-v4.tmp") or die "$!\n";
open (my $out6, ">", "$basedir/includes/peers-v6.tmp") or die "$!\n";

print $out4 "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n# Source: $input\n\n";
print $out6 "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n# Source: $input\n\n";

my $header=<$fh>;
while ( ! eof ($fh) ) {
	my $line = <$fh>;
	next if ($line =~ /^\s*#/);
	chomp $line;
	my ($type, $desc, $peeringdb, $asn, $template, $ipv4, $ipv6, 
	$filterv4, $filterv6,$localpref,$prefv4,$prefv6,$password,$passive) = split (";",$line);
	if ($type eq "IXP") {
		cli_out "IXP $desc\n";
		$ix_id = $peeringdb;
		$ix_desc = $desc;
		#		my $ixfile = "$basedir/data/ix/$peeringdb";
		#        	if ($force==1) { getstore ("https://www.peeringdb.com/api/ix/$peeringdb",$ixfile); }
		#if ( -s "$ixfile" ) {
		#	my @stat=stat("$ixfile");
		#	if (time()-$stat[9] > 43200) { getstore ("https://www.peeringdb.com/api/ix/$peeringdb",$ixfile); }
		#}
		next;
	} elsif ( $type eq "PNI" ) {
		cli_out "PNI\n";
		$ix_id = "";
		$ix_desc = "";
		next;
	}
	cli_out "  $desc, ASN $asn\n";
	my $netfile = "$basedir/data/net/$peeringdb";
	if ($peeringdb ne "" && $updated_net->{$peeringdb} <1) {
        if ($force==1) {
			cli_out ("  Downloading new copy of $netfile\n",1);
			getstore ("https://www.peeringdb.com/api/net/$peeringdb",$netfile);
	}
	if ( -s "$netfile" ) {
                my @stat=stat("$netfile");
                if (time()-$stat[9] > 43200) { 
			cli_out("  Downloading new copy of $netfile. Age: ".(time()-$stat[9])."\n",1);
			getstore ("https://www.peeringdb.com/api/net/$peeringdb",$netfile);
		}
	}
	$updated_net->{$peeringdb}=1;
	}
	if ($ipv4.$ipv6 eq "" && ( -s "$netfile")) {
		my $decoded_net = decode_json( readfile("$basedir/data/net/$peeringdb") );
		cli_out ("  Adding peer details from $basedir/data/net/$peeringdb\n",1);
		if ($template eq "") { 
			if ($decoded_net->{'data'}->[0]->{'info_type'} eq "Route Server") {
				$template = "ROUTESERVER"
			} else {
				$template = "PEERING"
			}
		}
		my $irr_as_set = $decoded_net->{'data'}->[0]->{'irr_as_set'};
		if ( $irr_as_set =~ /::/ ) {
			$irr_as_set =~ s/\w+::(.+)/\1/;
		}
		if ($filterv4 eq "") { $filterv4=$irr_as_set }; 
		if ($filterv6 eq "") { $filterv6=$irr_as_set }; 
		if ($prefv4 eq "") { $prefv4=$decoded_net->{'data'}->[0]->{'info_prefixes4'} }; 
		if ($prefv6 eq "") { $prefv6=$decoded_net->{'data'}->[0]->{'info_prefixes6'} }; 
		my $mdesc = $desc . " at $ix_desc"; 
		my $sess = 1;
		foreach my $elem ( @{$decoded_net->{'data'}->[0]->{'netixlan_set'}} ) {
			if ($sess > 1) { $mdesc = $desc . " $sess at $ix_desc" }; 
			next if ($elem->{'ix_id'} ne $ix_id);
			$asn_counter{$asn}++;
			$ipv4 = $elem->{'ipaddr4'}; $ipv6 = $elem->{'ipaddr6'}; $asn = $elem->{'asn'};
			if ($ipv4 ne "") { output_peer($out4, $asn, $template, $mdesc, $ipv4, $filterv4, $prefv4, $localpref, $password, $passive); }
			if ($ipv6 ne "") { output_peer($out6, $asn, $template, $mdesc, $ipv6, $filterv6, $prefv6, $localpref, $password, $passive); }
			$sess++;
		}
	} else {
		$asn_counter{$asn}++;
		if ($ipv4 ne "") { output_peer($out4, $asn, $template, $desc, $ipv4, $filterv4, $prefv4, $localpref, $password, $passive); }
		if ($ipv6 ne "") { output_peer($out6, $asn, $template, $desc, $ipv6, $filterv6, $prefv6, $localpref, $password, $passive); }
	}	
}

close $fh;
close $out4;
close $out6;

move ("$basedir/includes/peers-v4.tmp","$basedir/includes/peers-v4");
move ("$basedir/includes/peers-v6.tmp","$basedir/includes/peers-v6");

