# Provide translation layer between protocol specific defines and functions and general template functions
function match_my_prefixes() { 
	case net.type {
		NET_IP4: 
			if defined(myas_set) then {
				return match_my_prefixes_4();
			} else {
				return net ~ my_prefixes_4;
			}
		NET_IP6: 
			if defined(myas_set) then {
				return match_my_prefixes_6();
			} else {
				return net ~ my_prefixes_6;
			}
	}
}
function tag_peeringdb_ixid() { 
	case net.type {
		NET_IP4: return tag_peeringdb_ixid_4(); 
		NET_IP6: return tag_peeringdb_ixid_6(); 
	}
}
function ixp_prefixes() { 
	case net.type {
		NET_IP4: return ixp_prefixes_4;
		NET_IP6: return ixp_prefixes_6;
	}
}
function defaultroute() { 
	case net.type {
		NET_IP4: return defaultroute_4;
		NET_IP6: return defaultroute_6;
	}
}
function max_prefix_length() { 
	case net.type {
		NET_IP4: return max_prefix_length_4;
		NET_IP6: return max_prefix_length_6;
	}
}
function max_accepted_prefix() { 
	case net.type {
		NET_IP4: return max_accepted_prefix_4;
		NET_IP6: return max_accepted_prefix_6;
	}
}
function min_accepted_prefix() { 
	case net.type {
		NET_IP4: return min_accepted_prefix_4;
		NET_IP6: return min_accepted_prefix_6;
	}
}
function max_ixp_prefix() { 
	case net.type {
		NET_IP4: return max_ixp_prefix_4;
		NET_IP6: return max_ixp_prefix_6;
	}
}
function martians() { 
	case net.type {
		NET_IP4: return martians_4;
		NET_IP6: return martians_6;
	}
}
