# Provide functions and constants to be used with the birdc cli, specifically the 'show route where' command. 
# Any function and constant that exists within the bird config can be used there.
#
# Examples:
# # Show routes originating from ASN 15169
# bird> show route where origin_as(15169)
# # Show filtered routes with an invalid ROA and have ASN 6939 as next hop
# bird> show route where is_tagged(REASON_ROA_INVALID) && first_asn(6939) filtered
# # Show routes learned at IXP AMS-IX (peeringdb ID 26) from direct peers
# bird> show route where is_ix(26) && is_tagged(PREFIX_PEERING)

function first_as(int a)
{
        return bgp_path.first = a;
}

function origin_as(int a)
{
        return bgp_path.last_nonaggregated = a;
}

function path_match(int a)
{
	return a ~ bgp_path;
}

function next_hop(ip i)
{
	return gw = i;
}

function is(lc c)
{
        return c ~ bgp_large_community;
}

function is_c(pair c)
{
        return c ~ bgp_community;
}

function is_location(int n)
{
	return (myasn,prefix_location,n) ~ bgp_large_community;
}

function pref(int n)
{
	return preference = n;
}

function pref_ge(int n)
{
	return preference >= n;
}

function pref_le(int n)
{
	return preference <= n;
}

define PREFIX_INTERNAL 	= (myasn, prefix_type, internal_route);
define PREFIX_RS 	= (myasn, prefix_type, rs_route);
define PREFIX_PEERING	= (myasn, prefix_type, peering_route);
define PREFIX_CUSTOMER	= (myasn, prefix_type, customer_route);
define PREFIX_TRANSIT	= (myasn, prefix_type, transit_route);

define AFRICA		= (myasn, prefix_region, region_africa);
define ASIAPAC		= (myasn, prefix_region, region_asiapac);
define AUSTRALIA	= (myasn, prefix_region, region_australia);
define EUROPE		= (myasn, prefix_region, region_europe);
define MIDDLE_EAST	= (myasn, prefix_region, region_middle_east);
define NORTH_AMERICA	= (myasn, prefix_region, region_north_america);
define SOUTH_AMERICA	= (myasn, prefix_region, region_south_america);

# Some extra defines to make life easier <> the automatically defined ones in ./data/bird/peeringdb_defines
define CC_UK = CC_GB;
define IXP_AMSIX = IXP_AMS_IX;
define IXP_DECIX = IXP_DE_CIX_FRANKFURT;
define IXP_LINX = IXP_LINX_LON1;

