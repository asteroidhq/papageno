#! /usr/bin/perl

# usage: update-peers [-f] [file]
# Defaults to use $PWD/bgp-peers.csv

use strict;
use File::Copy;
use LWP::Simple; 
use JSON qw( decode_json );
use Template;

# Set some global defaults
my $basedir=".";
my $input="$ENV{PWD}/bgp-peers.csv";
my $outpath = "$basedir/data/bird";
my $template_1="lib/proto-template-1.0.tt";
my $template_2="lib/proto-template-2.0.tt";

# Track cmdline options
my $force=0;
my $verbose=0;
my $quiet=0;

# Provide a consistent counter per ASN for Protcocol IDs
my %asn_counter;

# Keep track of which files have already been updated while running this script
my %updated_file;

# Track per-IXP config details across iterations
my $ix_id;
my $ix_desc;
my $ix_localpref;

# process commandline arguments
foreach my $val (@ARGV) {
	if ($val eq "-f" )	{ $force=1; next }
	elsif($val eq "-v")	{ $verbose+=1; next }
	elsif($val eq "-q")	{ $quiet=1; next }
	else			{ $input=$val; }
}

sub outf {
	my $file=shift;
	open (my $fh, ">", "$file") or die "$file: $!\n";
	print $fh "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n# Source: $input\n#\n";
	return $fh;
}

# open input file
open (my $fh, "<:encoding(UTF-8)", $input) or die "$input: $!\n";

# open output files
my $out4=outf("$outpath/peers_v4-1.0.tmp");
my $out6=outf("$outpath/peers_v6-1.0.tmp");
my $out24=outf("$outpath/peers_v4-2.0.tmp");
my $out26=outf("$outpath/peers_v6-2.0.tmp");

# Loads constants from a given bird config file
sub load_defines {
	my $file = shift;
	my %rethash;
	if ( ! -s $file ) { return %rethash; }
	open (my $fh, "<:encoding(UTF-8)", $file) or die "$!\n";
	while ( my $line = <$fh> ) {
		if ($line =~ /^define (\w+)\s*=\s*(.+);/ ) {
			my ($name,$val)  = ($1,$2);
			$val =~ s/"(.*)?"/\1/;
			$rethash{"$name"}=$val;
		}
	}
	close ($fh);
	return \%rethash;
}

#Do my own asn/as-set first
my $bird4_defs = load_defines ("$basedir/bird.conf");
if ($bird4_defs->{"myasn"} && $bird4_defs->{"myas_set"}) {
       printf $out4 "#FILTERSET;%s;%s;__INTERNAL__;my_prefixes\n#\n",$bird4_defs->{"myasn"}, $bird4_defs->{"myas_set"};
}
my $bird6_defs = load_defines ("$basedir/bird6.conf");
if ($bird6_defs->{"myasn"} && $bird6_defs->{"myas_set"}) {
       printf $out6 "#FILTERSET;%s;%s;__INTERNAL__;my_prefixes\n#\n",$bird6_defs->{"myasn"}, $bird6_defs->{"myas_set"};
}
my $bird2_defs = load_defines ("$basedir/bird-2.conf");
if ($bird2_defs->{"myasn"} && $bird2_defs->{"myas_set"}) {
       printf $out24 "#FILTERSET;%s;%s;__INTERNAL__;my_prefixes\n#\n",$bird2_defs->{"myasn"}, $bird2_defs->{"myas_set"};
       printf $out26 "#FILTERSET;%s;%s;__INTERNAL__;my_prefixes\n#\n",$bird2_defs->{"myasn"}, $bird2_defs->{"myas_set"};
}

# Set max age of data files in seconds - set to 0 if forced update
my $max_file_age = ($force == 0) ? 43200 : 0;

my $tt = Template->new();

# prints to STDIN if important enough
sub cli_out {
	if ($quiet==1) { return }
	my ($str,$relevance) = @_;
	if ($relevance == "") { $relevance=0};
	if ($relevance <= $verbose) { print $str }
}

# Returns the first non-empty argument
sub choose { 
	foreach my $item (@_) {
		if ($item ne "") { return $item; }
	}
	return "";
}

# Returns a whole file into one string, if it exists
sub readfile {
	if ( -s "$_[0]" ) { return `cat $_[0]` } else { return "" }
}

# Take a line from a CSV file and match it up with a header array to return a hash
sub csv_to_hash {
	my ($input,@fields) = @_;
	my @arr = split (";",$input);
	my %rethash;
	foreach my $i (0 .. $#fields) { $rethash{"$fields[$i]"}=@arr[$i]; }
	return \%rethash;
}

# Updates a local file from a given URL, if it's too old. 
sub update_file {
	my ($url,$file,$max_age) = @_;
	return if ($updated_file{"$file"} >0);
	if ( -s "$file" ) {
        	my @stat=stat("$file");
                if (time()-$stat[9] < $max_age) { return }
		else { cli_out("  Downloading new copy of $file. Age: ".(time()-$stat[9])."\n",1) }
	} else { cli_out("  Downloading initial copy of $file from $url\n",1) }
	getstore ($url,$file);
	$updated_file{"$file"} =1;
}

# Outputs Bird 1 and Bird 2 peering configs to the predefined fds based on a hashref with all details required
sub output_peer {
	my $args = shift; 
	return if ($args->{'asn'} eq "");
	my $output->{'asn'}=$args->{'asn'}; 
	$asn_counter{$output->{'asn'}}++;
	# protocol independent output
	$output->{'template_function'}="filter_".lc($args->{'template'})."()"; 
	$output->{'peer_template'} = $args->{'template'};
	$output->{'desc'} = $args ->{'desc'};
	$output->{'filterv4'} = ($args->{'filterv4'} eq "NONE") ? "" : $args->{'filterv4'}; 
	$output->{'filterv6'} = ($args->{'filterv6'} eq "NONE") ? "" : $args->{'filterv6'}; 
	if ($args->{'template'} eq "ROUTESERVER") { $output->{'rs'} ="_rs" } 
	if ($args->{'password'})    { $output->{'password'} = "    password \"$args->{'password'}\";\n"; }
	if ($args->{'localpref'}) 	{ $output->{'localpref'} = "    preference $args->{'localpref'};\n"; }
	if ($args->{'gtsm'}) 	{ $output->{'gtsm'} = "    ttl security on;\n"; }
	if ($args->{'bfd'}) 	{ $output->{'bfd'} = "    bfd on;\n"; }
	if ($args->{'passive'} !~ /\s*/ ) 	{ $args->{'passive'} = "    passive on;\n"; } else { $args->{'passive'} = ""; }
	if ($args->{'ipv4'}) {
		$output->{'version'} = 4;
		$output->{'ip'} = $args->{'ipv4'};
		$output->{'id'} = substr($args->{'template'},0,1).$output->{'version'}."_".$output->{'asn'}.sprintf("_%02d",$asn_counter{$output->{'asn'}});
		$output->{'asset'} = $output->{'filterv4'};
		$output->{'filterv4'} =~ tr/-/_/;
		if ($output->{'filterv4'} eq "") {
			$output->{'filterline'} = "accept;";
		} else {	
			$output->{'filterline'} = "if \'in_".$output->{'filterv4'}."_".$output->{'version'}."\'() then accept;";
		}
		if ($args->{'prefixv4'} ne "") { $output->{'prefixlimit'} = "    import limit $args->{'prefixv4'} action block;\n"; }
		$tt->process($template_1,$output,$out4);
		$tt->process($template_2,$output,$out24);
	}
	if ($args->{'ipv6'}) {
		$output->{'version'} = 6;
		$output->{'ip'} = $args->{'ipv6'};
		$output->{'id'} = substr($args->{'template'},0,1).$output->{'version'}."_".$output->{'asn'}.sprintf("_%02d",$asn_counter{$output->{'asn'}});
		$output->{'asset'} = $output->{'filterv6'};
		$output->{'filterv6'} =~ tr/-/_/;
		if ($output->{'filterv6'} eq "") {
			$output->{'filterline'} = "accept;";
		} else {	
			$output->{'filterline'} = "if \'in_".$output->{'filterv6'}."_".$output->{'version'}."\'() then accept;";
		}
		if ($args->{'prefixv6'} ne "") { $output->{'prefixlimit'} = "    import limit $args->{'prefixv6'} action block;\n"; }
		$tt->process($template_1,$output,$out6);
		$tt->process($template_2,$output,$out26);
	}

}

# Process header, put into @fields array
my $header=<$fh>;
chomp $header;
my @fields = split (";",$header);
while ( my $line = <$fh>) {
	# Skip comment lines
	next if ($line =~ /^\s*#/);
	$line =~ s/\r//;
	my $args = csv_to_hash($line,@fields);
	my %output = %{$args};
	if ($args->{"type"} eq "IXP") {
		cli_out "IXP $args->{'desc'}\n";
		$ix_id = $args->{'peeringdb'};
		$ix_desc = $args->{'desc'};
		$ix_localpref = $args->{'localpref'};
		next;
	} elsif ( $args->{'type'} eq "PNI" ) {
		cli_out "PNI\n";
		$ix_id = "";
		$ix_desc = "";
		$ix_localpref = "";
		next;
	}
	# Try to get network info from peeringdb
	if ($args->{'asn'} ne "") {
		# Try to get ASN info from peeringdb
		my $asnfile = "$basedir/data/asn/$args->{'asn'}";
		update_file("https://www.peeringdb.com/api/net?asn=$args->{'asn'}",$asnfile,$max_file_age);
		# Only try to load if it actually contains data
		if ( -s $asnfile) {
			my $decoded_asn = decode_json( readfile($asnfile) );
			# If no peeringdb entry in the CSV, use the info from the ASN
			$output{'peeringdb'} = choose ($args->{'peeringdb'}, $decoded_asn->{'data'}->[0]->{'id'});
		}
	}
	# Try to get network info from peeringdb
	my $decoded_net;
	if ($output{'peeringdb'} ne "") {
		my $netfile = "$basedir/data/net/$output{'peeringdb'}";
		update_file("https://www.peeringdb.com/api/net/$output{'peeringdb'}",$netfile,$max_file_age);
		$decoded_net = decode_json( readfile("$netfile") );
		$output{'asn'}=choose($args->{'asn'},$decoded_net->{'data'}->[0]->{'asn'});
		my $irr_as_set = $decoded_net->{'data'}->[0]->{'irr_as_set'} =~ s/\w+::(.+)/\1/r; 
		$output{'filterv4'}=choose($args->{'filterv4'},$irr_as_set);
		$output{'filterv6'}=choose($args->{'filterv6'},$irr_as_set);
		$output{'localpref'}=choose($args->{'localpref'},$ix_localpref);
		# If no template defined, guess template from peeringdb info 
		if ($args->{'template'} eq "") { 
			$args->{'template'} =  ($decoded_net->{'data'}->[0]->{'info_type'} eq "Route Server") ? "ROUTESERVER" : "PEERING";
		}
		if ($args->{'template'} eq "PEERING" || $args->{'template'} eq "ROUTESERVER") { 
			$output{'prefixv4'}=choose($args->{'prefixv4'},$decoded_net->{'data'}->[0]->{'info_prefixes4'}); 
			$output{'prefixv6'}=choose($args->{'prefixv6'},$decoded_net->{'data'}->[0]->{'info_prefixes6'}); 
		}
	}
	# If there's no ASN right now it's hopeless, go to the next.
	next if ($output{'asn'} eq "");
	# If we don't have any IPs for a peer but we do have a peeringdb entry
	if ($args->{'ipv4'} eq "" && $args->{'ipv6'} eq "" && $output{'peeringdb'} ne "") {
		my $sess = 1;
		foreach my $elem ( @{$decoded_net->{'data'}->[0]->{'netixlan_set'}} ) {
			next if ($elem->{'ix_id'} ne $ix_id);
			$output{'desc'} = ($sess > 1) ? "$args->{'desc'} $sess at $ix_desc" : "$args->{'desc'} at $ix_desc";
			$output{'asn'} = choose ($args->{'asn'},$elem->{'asn'});
			$output{'password'} = $args->{'password'};
			$output{'gtsm'} = $args->{'gtsm'};
			$output{'bfd'} = $args->{'bfd'};
			$output{'template'}=$args->{'template'};
			$output{'ipv4'}= $elem->{'ipaddr4'};
			$output{'ipv6'}= $elem->{'ipaddr6'};
			cli_out "  $output{'desc'} AS $output{'asn'} template $output{'template'} $output{'ipv4'} $output{'ipv6'}\n";
			output_peer(\%output);
			$sess++;
		}
	} else {
		cli_out "  $output{'desc'} AS $output{'asn'} template $output{'template'} $output{'ipv4'} $output{'ipv6'}\n";
		output_peer(\%output);
	}	
}

close $fh;
close $out4;
close $out6;
close $out24;
close $out26;

move ("$outpath/peers_v4-1.0.tmp","$outpath/peers_v4-1.0");
move ("$outpath/peers_v6-1.0.tmp","$outpath/peers_v6-1.0");
move ("$outpath/peers_v4-2.0.tmp","$outpath/peers_v4-2.0");
move ("$outpath/peers_v6-2.0.tmp","$outpath/peers_v6-2.0");

