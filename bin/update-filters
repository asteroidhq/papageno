#! /usr/bin/perl
# usage: update-filters [file]
# Defaults to use $PWD/bgp-peers.csv

use strict;
use File::Copy;
use threads;
use Template;

my $basedir=".";
my $outpath="$basedir/data/bird/filters_v";
my $template="lib/prefix-template.tt";
my $bgpq=`which bgpq3`;
chomp $bgpq;

if ( $bgpq eq "") {
	die("Couldn't find bgpq3 executable, please install or update the value of \$bgpq in file $0\n");
}

my $force=0;
my $verbose=0;
my $quiet=0;

my %processed_sets;

foreach my $val (@ARGV) {
        if ($val eq "-f" )      { $force=1; next }
        elsif($val eq "-v")     { $verbose+=1; next }
        elsif($val eq "-q")     { $quiet=1; next }
}

# Set max age of data files in seconds - set to 0 if forced update
my $max_file_age = ($force == 0) ? 43200 : 0;

my $tt = Template->new();

sub cli_out {
        if ($quiet==1) { return;}
        my ($str) = @_[0];
	my $relevance = @_[1] || 0;
        if ($relevance <= $verbose) { print $str }
}

sub output_prefixes {
	my ($query,$afi,$function_name) = @_;
	my $filter = $query;
	$filter =~ tr/-/_/;
	my @stat;
	my $age = 86400;
	if ( -s "$outpath$afi/$filter.prefixes") { 
		open (my $file, "$outpath$afi/$filter.prefixes") or die "$outpath$afi/$filter.prefixes: $!\n";
		$age=time-((stat($file))[9]);
		close $file;
	}
	if ( $age > $max_file_age  && $processed_sets{"$query-$afi"} !=1 ) {
		$processed_sets{"$query-$afi"}=1;
		my $output->{'last_updated'} = scalar localtime;
		my $output->{'prefixes'}=`$bgpq -A -b -$afi $query -l prefixes`;
		my $output->{'function_name'} = $function_name;
		open (my $file, ">","$outpath$afi/$filter.prefixes.tmp") or die "$outpath$afi/$filter.prefixes.tmp: $!\n";
		$tt->process($template,$output,$file);
		if ($function_name =~ /my_prefixes/) {
			print $file <<EOF;
function match_my_prefixes_$afi()
prefix set prefixes;
{
    $output->{'prefixes'}
    return net ~ prefixes;
}
EOF
		}
		close ($file);
		move ("$outpath$afi/$filter.prefixes.tmp","$outpath$afi/$filter.prefixes");
	}
}

sub process_input {
	my ($afi,@input) = @_;
	foreach my $line (@input) {
		chomp $line;
		my (undef, $asn, $filter, $template,$id) = split (";",$line);
		my $function_name;
		if ($filter ne "") { 
			if ($template eq "__INTERNAL__") {
				$function_name = "in_".$id."_$afi()";
                	} else {
                        	$function_name = "in_".$filter."_$afi()";
				$function_name =~ tr/-/_/;
                	}
			cli_out "Updating IPv$afi filter for peer $id, AS-set $filter\n";
			output_prefixes($filter,$afi,$function_name);
		}
	}
}

process_input(4,split(/\n/,`grep '#FILTERSET' $basedir/data/bird/peers_v4-1.0`));
process_input(6,split(/\n/,`grep '#FILTERSET' $basedir/data/bird/peers_v6-1.0`));

