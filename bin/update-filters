#! /usr/bin/perl
# usage: update-filters [file]
# Defaults to use $PWD/bgp-peers.csv

use strict;
use File::Copy;
use threads;

my $basedir=".";
my $bgpq=`which bgpq3`;
chomp $bgpq;

if ( $bgpq eq "") {
	die("Couldn't find bgpq3 executable, please install or update the value of \$bgpq in file $0\n");
}

my $force=0;
my $verbose=0;
my $quiet=0;

my %processed_sets;

foreach my $val (@ARGV) {
        if ($val eq "-f" )      { $force=1; next }
        elsif($val eq "-v")     { $verbose+=1; next }
        elsif($val eq "-q")     { $quiet=1; next }
}

sub cli_out {
        if ($quiet==1) { return;}
        my ($str) = @_[0];
	my $relevance = @_[1] || 0;
        if ($relevance <= $verbose) { print $str }
}

sub output_prefixes {
	my ($query,$afi,$function_name,$output_dir) = @_;
	my $filter = $query;
	$filter =~ tr/-/_/;
	my @stat;
	my $age = 86400;
	if ( -s "$output_dir/$filter.prefixes") { 
		open (my $file, "$output_dir/$filter.prefixes") or die "$!\n";
		$age=time-((stat($file))[9]);
		close $file;
	}
	if ( ($age > 3600 ) || ($force==1 && $processed_sets{"$query-$afi"} !=1) ) {
		$processed_sets{"$query-$afi"}=1;
		my $last_updated = scalar localtime;
		my $prefixes=`$bgpq -A -b -$afi $query -l prefixes`;
		open (my $file, ">","$output_dir/$filter.prefixes.tmp") or die "$!\n";
		print $file <<EOF;
# UPDATED AUTOMATICALLY DO NOT EDIT!
# Last updated: $last_updated

function $function_name
prefix set prefixes;
{
    $prefixes
    if ( net ~ prefixes ) then {
        return true;
    } else {
#        print "REJECTING: ",net.ip,"/",net.len," received from ",from,": Prefix is not in as-set!";
        bgp_large_community.add(REASON_AS_SET);
        return false;
    }
}
EOF
		if ($function_name =~ /my_prefixes/) {
			print $file <<EOF;
function match_my_prefixes_$afi()
prefix set prefixes;
{
    $prefixes
    return net ~ prefixes;
}
EOF
		}
		close ($file);
		move ("$output_dir/$filter.prefixes.tmp","$output_dir/$filter.prefixes");
	}
}

my @input;

@input=split(/\n/,`grep '#FILTERSET' $basedir/data/bird/peers_v4-1.0 | sort | uniq`);
foreach my $line (@input) {
	chomp $line;
	my (undef, $asn, $filter, $template,$id) = split (";",$line);
	my $function_name;
	my $output_dir = "$basedir/data/bird/filters_v4";
	if ($filter ne "") { 
		if ($template eq "__INTERNAL__") {
                        $function_name = "in_".$id."_4()";
                } else {
                        $function_name = "in_".$filter."_4()";
			$function_name =~ tr/-/_/;
                }
		cli_out "Updating IPv4 filter for peer $id, AS-set $filter\n";
		output_prefixes($filter,"4",$function_name,$output_dir);
	}
}

@input=split(/\n/,`grep '#FILTERSET' $basedir/data/bird/peers_v6-1.0 | sort | uniq`);
foreach my $line (@input) {
	chomp $line;
	my (undef, $asn, $filter, $template,$id) = split (";",$line);
	my $function_name;
	my $output_dir = "$basedir/data/bird/filters_v6";
	if ($filter ne "") { 
		if ($template eq "__INTERNAL__") {
                        $function_name = "in_".$id."_6()";
                } else {
                        $function_name = "in_".$filter."_6()";
			$function_name =~ tr/-/_/;
                }
		cli_out "Updating IPv6 filter for peer $id, AS-set $filter\n";
		output_prefixes($filter,"6",$function_name,$output_dir);
	}
}

while( threads->list ) {
    for my $joinable ( threads->list( threads::joinable ) ) {
            $joinable->join;
    }
}
