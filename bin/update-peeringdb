#!/usr/bin/perl
#
# use -f commandline option to renew data sources
#
use LWP::Simple;                # From CPAN
use JSON qw( decode_json );     # From CPAN
use File::Copy;
use strict;                     # Good practice

my $cmdl = $ARGV[0] || "";

my $basedir=".";

sub readfile {
	return `cat $_[0]`;
}

#read defines
my %defs;
open (my $def, "<", "$basedir/includes/defines");
while (<$def>) {
	chomp;
	next if /^$/;
	next if /^\s*#/;
	if ($_ =~ /(\w+)\s*=\s*(\d+)/) { $defs{"$1"}="$2"; }
}
close $def;

open (my $out4, ">", "$basedir/includes/peeringdb-v4.tmp") or die "$!\n";
open (my $out6, ">", "$basedir/includes/peeringdb-v6.tmp") or die "$!\n";

open (my $filter4, ">", "$basedir/includes/filters-v4/ixp.prefixes.tmp") or die "$!\n";
open (my $filter6, ">", "$basedir/includes/filters-v6/ixp.prefixes.tmp") or die "$!\n";

print $out4 "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n\n";
print $out6 "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n\n";
print $filter4 "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n\n";
print $filter6 "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n\n";

print $filter4 "define ixp_prefixes = [\n";
print $filter6 "define ixp_prefixes = [\n";

if ("$cmdl" eq "-f") {
	getstore ("https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-2/slim-2.json", "$basedir/data/slim-2.json");
	getstore ("https://www.peeringdb.com/api/ix", "$basedir/data/ix.json");
	getstore ("https://www.peeringdb.com/api/ixlan", "$basedir/data/ixlan.json");
	getstore ("https://www.peeringdb.com/api/ixpfx", "$basedir/data/ixpfx.json");
}

my %iso_code;

my $decoded_iso = decode_json( readfile("$basedir/data/slim-2.json") );
foreach my $iso (@{$decoded_iso}) { $iso_code{$iso->{'alpha-2'}} = $iso->{'country-code'}; }

my %ix_continent;
my %ix_country;
my $decoded_ix = decode_json( readfile("$basedir/data/ix.json") );
foreach my $ix (@{$decoded_ix->{'data'}}) {
	$ix_continent{$ix->{'id'}} = $ix->{'region_continent'};
	$ix_country{$ix->{'id'}} = $ix->{'country'};
}

my %ix_id;
my $decoded_ixlan = decode_json( readfile("$basedir/data/ixlan.json") );
my $decoded_ixpfx = decode_json( readfile("$basedir/data/ixpfx.json") );
foreach my $lan (@{$decoded_ixlan->{'data'}}) { $ix_id{$lan->{'id'}} = $lan->{'ix_id'}; }

my %region;
$region{"Africa"} = $defs{"region_africa"};
$region{"Asia Pacific"} = $defs{"region_asiapac"};
$region{"Australia"} = $defs{"region_australia"};
$region{"Europe"} = $defs{"region_europe"};
$region{"Middle East"} = $defs{"region_middle_east"};
$region{"North America"} = $defs{"region_north_america"};
$region{"South America"} = $defs{"region_south_america"};

print $out4 "function tag_peeringdb_ixid() {\n";
print $out6 "function tag_peeringdb_ixid() {\n";

my $v4counter=0;
my $v6counter=0;
foreach my $i (@{$decoded_ixpfx->{'data'}}) {
    my $id = $ix_id{$i->{'ixlan_id'}};
    my $cid = $iso_code{$ix_country{"$id"}};
    my $cont = $region{$ix_continent{"$id"}};
    my $pid = ($id+$defs{"ix_id_offset"});
    my $country = ($cid+$defs{"country_iso_offset"});
    my $prefix = $i->{'prefix'};
    if ($i->{'protocol'} eq "IPv4") { 
	if ( $v4counter == 0 ) { print $filter4 "    $i->{'prefix'}" }
	else { print $filter4 ",\n    $i->{'prefix'}" }
	$v4counter++;
	print $out4 <<EOF;
    if from ~ $prefix then { 
      bgp_community.add((myasn,$pid));
      bgp_community.add((myasn,$country));
      bgp_community.add((myasn,$cont));
      bgp_large_community.add((myasn,prefix_ix,$id));
      bgp_large_community.add((myasn,prefix_country,$cid));
      bgp_large_community.add((myasn,prefix_region,$cont));
      return true; 
    }
EOF
    } elsif ($i->{'protocol'} eq "IPv6") {
	if ( $v6counter == 0 ) { print $filter6 "    $i->{'prefix'}" }
	else { print $filter6 ",\n    $i->{'prefix'}" }
	$v6counter++;
	print $out6 <<EOF;
    if from ~ $prefix then { 
      bgp_community.add((myasn,$pid));
      bgp_community.add((myasn,$country));
      bgp_community.add((myasn,$cont));
      bgp_large_community.add((myasn,prefix_ix,$id));
      bgp_large_community.add((myasn,prefix_country,$cid));
      bgp_large_community.add((myasn,prefix_region,$cont));
      return true; 
    }
EOF
    }
}

print $filter4 "\n];\n";
print $filter6 "\n];\n";

print $out4 <<EOF;
    bgp_community.add ((myasn,10000));
    bgp_large_community.add ((myasn,prefix_ix,0));
    return true;
}
EOF
print $out6 <<EOF;
    bgp_community.add ((myasn,10000));
    bgp_large_community.add ((myasn,prefix_ix,0));
    return true;
}
EOF

close $out4;
close $out6;
close $filter4;
close $filter6;

move ("$basedir/includes/peeringdb-v4.tmp","$basedir/includes/peeringdb-v4");
move ("$basedir/includes/peeringdb-v6.tmp","$basedir/includes/peeringdb-v6");


move ("$basedir/includes/filters-v4/ixp.prefixes.tmp", "$basedir/includes/filters-v4/ixp.prefixes");
move ("$basedir/includes/filters-v6/ixp.prefixes.tmp", "$basedir/includes/filters-v6/ixp.prefixes");

