
# Individual sanity checks

function net_martian()
{
	if ( net ~ martians ) then {
		print "REJECTING: ",net.ip,"/",net.len," received from ",from,": Prefix is a martian";
		bgp_large_community.add(REASON_MARTIAN);
		return true;
	}
	# Any prefixes larger than max_accepted_prefix
	if net.len < max_accepted_prefix then {
		bgp_large_community.add(REASON_TOO_SHORT);
		return true;
	}
	# Any prefixes smaller than min_accepted_prefix
	if net.len > min_accepted_prefix then {
		bgp_large_community.add(REASON_TOO_LONG);
		return true;
	}
	return false;
}

function net_ixp()
{
	if (net.len >= max_ixp_prefix) then return false;
	if ( net ~ ixp_prefixes ) then {
		print "REJECTING: ",net.ip,"/",net.len," received from ",from,": Prefix belongs to an IXP";
		bgp_large_community.add(REASON_IXP_PREFIX);
		return true;
	}
	return false;
}

function asn_bogons()
{
	if bgp_path ~ bogon_asns then {
                # print "REJECTING: ",net.ip,"/",net.len," received from ",from,": Found bogon ASN in path", bgp_path;
                bgp_large_community.add(REASON_BOGON);
                return true;
        } else {
                return false;
        }
}

function asn_transit()
{
	if bgp_path ~ transit_asns then {
                # print "REJECTING: ",net.ip,"/",net.len," received from ",from,": Found well-known transit ASN in ", bgp_path;
                bgp_large_community.add(REASON_TRANSIT);
                return true;
        } else {
                return false;
        }
}

function is_first_asn(int asn) {
	if bgp_path.first != asn then {
                print "REJECTING: ",net.ip,"/",net.len," received from ",from,": First AS in path does not match with peer AS - ", bgp_path.first, " != ", asn;
                bgp_large_community.add(REASON_FIRST_ASN);
                return true;
        } else {
                return false;
        }
}

function is_first_asn_rs(int asn) {
	if bgp_path.first = asn then {
                print "REJECTING: ",net.ip,"/",net.len," received from ",from,": First AS in path matches with routeserver AS - ", bgp_path.first, " != ", asn;
                bgp_large_community.add(REASON_FIRST_ASN);
                return true;
        } else {
                return false;
        }
}

function next_hop_check() {
	if bgp_next_hop != from then {
                print "REJECTING: ",net.ip,"/",net.len," received from ",from,": Invalid next hop!";
                bgp_large_community.add(REASON_NEXT_HOP);
                return true;
        } else {
                return false;
        }
}

function next_hop_check_rs() {
	if bgp_next_hop = from then {
                print "REJECTING: ",net.ip,"/",net.len," received from ",from,": Routeserver as next hop!";
                bgp_large_community.add(REASON_NEXT_HOP);
                return true;
        } else {
                return false;
        }
}

function bgp_path_length() {
	if bgp_path.len > 100 then {
                print "REJECTING: ",net.ip,"/",net.len," received from ",from,": AS path too long: ",bgp_path.len;
                bgp_large_community.add(REASON_PATH_LENGTH);
                return true;
        } else {
                return false;
        }
}

function net_myprefixes() {
	if net ~ myprefixes then {
                print "REJECTING: ",net.ip,"/",net.len," received from ",from,": One of our own prefixes!";
                bgp_large_community.add(REASON_MY_PREFIX);
                return true;
        } else {
                return false;
        }
}

function origin_check() {
	if roa_check(roa_main) = ROA_INVALID then {
                print "REJECTING: ",net.ip,"/",net.len," received from ",from,": ROA INVALID!";
                bgp_large_community.add(REASON_ROA_INVALID);
                return true;
	} else {
		if roa_check(roa_main) = ROA_VALID then {
			bgp_large_community.add((myasn,prefix_roa,roa_valid));
		} else {
			bgp_large_community.add((myasn,prefix_roa,roa_unknown));
		}
		return false;
	}
}
		

# BGP communities processing

function process_blackhole_in() {
	if ( ( (65535,666) ~ bgp_community ) && ( net.len = max_prefix_length ) ) then {
		bgp_local_pref = 200;
		gw = blackhole_ip;
		bgp_next_hop = blackhole_ip;
		return true;
	} else {
		return false;
	}
}

function process_communities_in() {
	case bgp_community {
		(myasn,prepend_one): 		bgp_path.prepend(myasn);
		(myasn,prepend_two): 		bgp_path.prepend(myasn);
						bgp_path.prepend(myasn);
		(myasn,prepend_three): 		bgp_path.prepend(myasn);
						bgp_path.prepend(myasn);
						bgp_path.prepend(myasn);
		(myasn,pref_customer):		preference = 120;
		(myasn,pref_customer_backup):	preference = 110;
		(myasn,pref_peer):		preference = 100;
		(myasn,pref_peer_backup):	preference = 98;
		(myasn,pref_customer_fallback):	preference = 96;
	}
}

function process_communities_out() {
	case bgp_community {
		(myasn,no_transit):	if proto ~ "T*" then return true;
	}
}

function strip_my_communities() {
	bgp_community.delete([(0, *)]);
	bgp_large_community.delete([(0,*,*)]);
	bgp_community.delete([(myasn, *)]);
	bgp_large_community.delete([(myasn,*,*)]);
	return true;
}

function honor_graceful_shutdown() {
	if (65535, 0) ~ bgp_community then {
		bgp_local_pref = 0;
	}
}

# Sanity checking functions per peer template, also used by peers with AS-SETs defined

function filter_routeserver() {
	strip_my_communities();
	bgp_community.add((myasn,rs_route));
	bgp_large_community.add((myasn,prefix_type,rs_route));
	tag_peeringdb_ixid();
#	if process_blackhole_in() then return false;
	if origin_check() then return true;
	if next_hop_check_rs() then return true;
	if bgp_path_length() then return true;
	if asn_transit() then return true;
	if asn_bogons() then return true;
	if net_myprefixes() then return true;
	if net_martian() then return true;
	if net_ixp() then return true;
	honor_graceful_shutdown();
	return false;
}

function filter_peering() {
	strip_my_communities();
	bgp_community.add((myasn,peering_route));
	bgp_large_community.add((myasn,prefix_type,peering_route));
	tag_peeringdb_ixid();
	if origin_check() then return true;
	if next_hop_check() then return true;
	if bgp_path_length() then return true;
	if asn_transit() then return true;
	if asn_bogons() then return true;
	if net_myprefixes() then return true;
	if net_martian() then return true;
	if net_ixp() then return true;
	honor_graceful_shutdown();
	return false;
}

function filter_customer() {
	bgp_community.add((myasn,customer_route));
	bgp_large_community.add((myasn,prefix_type,customer_route));
	if next_hop_check() then return true;
	if bgp_path_length() then return true;
	if asn_transit() then return true;
	if asn_bogons() then return true;
	if net_myprefixes() then return true;
	if net_martian() then return true;
	if net_ixp() then return true;
	honor_graceful_shutdown();
	return false;
}

function filter_transit() {
	strip_my_communities();
	bgp_community.add((myasn,transit_route));
	bgp_large_community.add((myasn,prefix_type,transit_route));
	if next_hop_check() then return true;
	if bgp_path_length() then return true;
	if asn_bogons() then return true;
	if net_myprefixes() then return true;
	if net_martian() then return true;
	if net_ixp() then return true;
	honor_graceful_shutdown();
	return false;
}

# Inbound filters if no AS-SETs defined

filter bgp_in_customer {
	reject;
#	if filter_customer() then reject;
#	accept;
}

# Outbound filters

filter ebgp_out 
{
	if net_martian() then reject;
	bgp_path.delete(bogon_asns);
	strip_my_communities();
	if defined(myas_set) then {
		if in_my_prefixes() then accept;
	} else {
		if net ~ myprefixes then accept;
	}
	reject;
}

filter ebgp_customer {
	if net_martian() then reject;
	if ( source = RTS_BGP && net != defaultroute ) then accept; 
	reject;
}

filter ebgp_customer_default {
	if ( net = defaultroute ) then accept; 
	reject;
}

# Internal filters

filter ibgp_in {
	accept;
}

filter ibgp_out {
	accept;
}

# BGP templates

template bgp INTERNAL {
	local as myasn;
	import filter ibgp_in;
	export filter ibgp_out;
	preference 200;
}

template bgp CUSTOMER {
	local as myasn;
	import keep filtered;
	import limit default_pfxlimit_customer action block;
	import filter bgp_in_customer;
	export filter ebgp_customer;
	preference default_preference_customer;
}

template bgp PEERING {
	local as myasn;
	import keep filtered;
	import limit default_pfxlimit_peering action block;
	import filter {
	        if filter_peering() then reject;
        	accept;
	};
	export filter ebgp_out;
	preference default_preference_peering;
}

template bgp ROUTESERVER {
	local as myasn;
	import keep filtered;
	import limit default_pfxlimit_routeserver action block;
	import filter {
		if filter_routeserver() then reject;
		accept;
	};	
	export filter ebgp_out;
	preference default_preference_routeserver;
}

template bgp TRANSIT {
	local as myasn;
	import keep filtered;
	import filter {
		if filter_transit() then reject;
		accept;
	};
	export filter ebgp_out;
	preference default_preference_transit;
}

