#!/usr/bin/perl
#
# use -f commandline option to renew data sources
#
use LWP::Simple;                # From CPAN
use JSON qw( decode_json );     # From CPAN
use File::Copy;
use strict;                     # Good practice
use warnings;                   # Good practice

my $cmdl = $ARGV[0] || "";

my $tmpdir="/tmp";
my $basedir=".";

sub readfile {
	return `cat $_[0]`;
}

#read defines
my %defs;
open (my $def, "<", "$basedir/includes/defines");
while (<$def>) {
	chomp;
	next if /^$/;
	next if /^\s*#/;
	if ($_ =~ /(\w+)\s*=\s*(\d+)/) { $defs{"$1"}="$2"; }
}
close $def;

open (my $out4, ">", "$tmpdir/peeringdb-v4.tmp") or die "$!\n";
open (my $out6, ">", "$tmpdir/peeringdb-v6.tmp") or die "$!\n";

print $out4 "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n\n";
print $out6 "# UPDATED AUTOMATICALLY DO NOT EDIT!\n# Last updated: ".localtime."\n\n";


if ("$cmdl" eq "-f") {
	getstore ("https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-2/slim-2.json", "$basedir/data/slim-2.json");
	getstore ("https://www.peeringdb.com/api/ix", "$basedir/data/ix.json");
	getstore ("https://www.peeringdb.com/api/ixlan", "$basedir/data/ixlan.json");
	getstore ("https://www.peeringdb.com/api/ixpfx", "$basedir/data/ixpfx.json");
}

my %iso_code;

my $decoded_iso = decode_json( readfile("$basedir/data/slim-2.json") );
foreach my $iso (@{$decoded_iso}) { $iso_code{$iso->{'alpha-2'}} = $iso->{'country-code'}; }

my %ix_continent;
my %ix_country;
my $decoded_ix = decode_json( readfile("$basedir/data/ix.json") );
foreach my $ix (@{$decoded_ix->{'data'}}) {
	$ix_continent{$ix->{'id'}} = $ix->{'region_continent'};
	$ix_country{$ix->{'id'}} = $ix->{'country'};
}

my %ix_id;
my $decoded_ixlan = decode_json( readfile("$basedir/data/ixlan.json") );
my $decoded_ixpfx = decode_json( readfile("$basedir/data/ixpfx.json") );
foreach my $lan (@{$decoded_ixlan->{'data'}}) { $ix_id{$lan->{'id'}} = $lan->{'ix_id'}; }

my %region;
$region{"Africa"} = $defs{"region_africa"};
$region{"Asia Pacific"} = $defs{"region_asiapac"};
$region{"Australia"} = $defs{"region_australia"};
$region{"Europe"} = $defs{"region_europe"};
$region{"Middle East"} = $defs{"region_middle_east"};
$region{"North America"} = $defs{"region_north_america"};
$region{"South America"} = $defs{"region_south_america"};

print $out4 "function tag_peeringdb_ixid() {\n";
print $out6 "function tag_peeringdb_ixid() {\n";

foreach my $i (@{$decoded_ixpfx->{'data'}}) {
    my $id = $ix_id{$i->{'ixlan_id'}};
    my $pid = ($id+$defs{"ix_id_offset"});
    my $country = ($iso_code{$ix_country{"$id"}}+$defs{"country_iso_offset"});
    my $cont = $region{$ix_continent{"$id"}};
    if ($i->{'protocol'} eq "IPv4") { 
	print $out4 "    if from ~ $i->{'prefix'} then { \n";
	print $out4 "      bgp_community.add((myasn,$pid));\n";
	print $out4 "      bgp_community.add((myasn,$country));\n";
	print $out4 "      bgp_community.add((myasn,$cont));\n";
      	print $out4 "      return true; } \n";
    } elsif ($i->{'protocol'} eq "IPv6") {
	print $out6 "    if from ~ $i->{'prefix'} then { \n";
	print $out6 "      bgp_community.add((myasn,$pid));\n";
	print $out6 "      bgp_community.add((myasn,$country));\n";
	print $out6 "      bgp_community.add((myasn,$cont));\n";
      	print $out6 "      return true; } \n";
    }
}
print $out4 "    return false;\n}\n";
print $out6 "    return false;\n}\n";

close $out4;
close $out6;

move ("$tmpdir/peeringdb-v4.tmp","$basedir/includes/peeringdb-v4");
move ("$tmpdir/peeringdb-v6.tmp","$basedir/includes/peeringdb-v6");



